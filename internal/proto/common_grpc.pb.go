// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CFSPublicClient is the client API for CFSPublic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CFSPublicClient interface {
	GetServerInfo(ctx context.Context, in *ServerInfoRequest, opts ...grpc.CallOption) (*ServerInfoResponse, error)
	CreateFarm(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type cFSPublicClient struct {
	cc grpc.ClientConnInterface
}

func NewCFSPublicClient(cc grpc.ClientConnInterface) CFSPublicClient {
	return &cFSPublicClient{cc}
}

func (c *cFSPublicClient) GetServerInfo(ctx context.Context, in *ServerInfoRequest, opts ...grpc.CallOption) (*ServerInfoResponse, error) {
	out := new(ServerInfoResponse)
	err := c.cc.Invoke(ctx, "/CFSPublic/GetServerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cFSPublicClient) CreateFarm(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CFSPublic/CreateFarm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CFSPublicServer is the server API for CFSPublic service.
// All implementations must embed UnimplementedCFSPublicServer
// for forward compatibility
type CFSPublicServer interface {
	GetServerInfo(context.Context, *ServerInfoRequest) (*ServerInfoResponse, error)
	CreateFarm(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedCFSPublicServer()
}

// UnimplementedCFSPublicServer must be embedded to have forward compatible implementations.
type UnimplementedCFSPublicServer struct {
}

func (UnimplementedCFSPublicServer) GetServerInfo(context.Context, *ServerInfoRequest) (*ServerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInfo not implemented")
}
func (UnimplementedCFSPublicServer) CreateFarm(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFarm not implemented")
}
func (UnimplementedCFSPublicServer) mustEmbedUnimplementedCFSPublicServer() {}

// UnsafeCFSPublicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CFSPublicServer will
// result in compilation errors.
type UnsafeCFSPublicServer interface {
	mustEmbedUnimplementedCFSPublicServer()
}

func RegisterCFSPublicServer(s grpc.ServiceRegistrar, srv CFSPublicServer) {
	s.RegisterService(&CFSPublic_ServiceDesc, srv)
}

func _CFSPublic_GetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CFSPublicServer).GetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CFSPublic/GetServerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CFSPublicServer).GetServerInfo(ctx, req.(*ServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CFSPublic_CreateFarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CFSPublicServer).CreateFarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CFSPublic/CreateFarm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CFSPublicServer).CreateFarm(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CFSPublic_ServiceDesc is the grpc.ServiceDesc for CFSPublic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CFSPublic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CFSPublic",
	HandlerType: (*CFSPublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerInfo",
			Handler:    _CFSPublic_GetServerInfo_Handler,
		},
		{
			MethodName: "CreateFarm",
			Handler:    _CFSPublic_CreateFarm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/common.proto",
}
